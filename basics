# Hello World Program
print("Hello, World!")

# Variables and Data Types
name = "Aditya"
age = 22
is_student = True

print("Name:", name)
print("Age:", age)
print("Student:", is_student)

# Taking user input
name = input("Enter your name: ")
age = int(input("Enter your age: "))

print("Hello", name, "you are", age, "years old.")

# Different data types in Python
a = 10          # int
b = 3.14        # float
c = "Python"    # string
d = True        # boolean
e = [1, 2, 3]   # list
f = (4, 5, 6)   # tuple
g = {"x": 1, "y": 2}  # dictionary

print(type(a), a)
print(type(b), b)
print(type(c), c)
print(type(d), d)
print(type(e), e)
print(type(f), f)
print(type(g), g)



#loops

# -------------------------
# Python Practice - Loops
# -------------------------

# 1. Print table of 7 using for loop
print("Table of 7:")
for i in range(1, 11):
    print(f"7 x {i} = {7*i}")

print("\n------------------")

# 2. Print numbers from 50 to 100 using while loop
print("Numbers from 50 to 100:")
i = 50
while i <= 100:
    print(i, end=" ")
    i += 1

print("\n\n------------------")

# 3. Print even numbers from 1 to 20
print("Even numbers from 1 to 20:")
for i in range(1, 21):
    if i % 2 == 0:
        print(i, end=" ")

print("\n\n------------------")

# 4. Print odd numbers from 1 to 20
print("Odd numbers from 1 to 20:")
for i in range(1, 21):
    if i % 2 != 0:
        print(i, end=" ")

print("\n\n------------------")

# 5. Sum of first 10 natural numbers using while loop
print("Sum of first 10 natural numbers:")
i = 1
s = 0
while i <= 10:
    s += i
    i += 1
print(s)

print("\n------------------")

# 6. Factorial of a number (using for loop)
n = 5
fact = 1
for i in range(1, n+1):
    fact *= i
print(f"Factorial of {n} = {fact}")

print("\n------------------")

# 7. Reverse numbers from 10 to 1 using while loop
print("Reverse numbers from 10 to 1:")
i = 10
while i >= 1:
    print(i, end=" ")
    i -= 1


# -------------------------
# Python Practice - Functions
# -------------------------

# 1. Function to add two numbers
def add(a, b):
    return a + b

print("Addition:", add(10, 5))

print("\n------------------")

# 2. Function to check if number is even or odd
def check_even_odd(n):
    if n % 2 == 0:
        return f"{n} is Even"
    else:
        return f"{n} is Odd"

print(check_even_odd(7))
print(check_even_odd(12))

print("\n------------------")

# 3. Function to find factorial
def factorial(n):
    fact = 1
    for i in range(1, n+1):
        fact *= i
    return fact

print("Factorial of 5:", factorial(5))

print("\n------------------")

# 4. Function to find square of a number
def square(n):
    return n * n

print("Square of 9:", square(9))

print("\n------------------")

# 5. Function to return maximum of three numbers
def maximum(a, b, c):
    return max(a, b, c)

print("Maximum of 12, 8, 20:", maximum(12, 8, 20))

print("\n------------------")

# 6. Function to calculate simple interest
def simple_interest(p, r, t):
    return (p * r * t) / 100

print("Simple Interest:", simple_interest(1000, 5, 2))

print("\n------------------")

# 7. Function with default parameter
def greet(name="Farmer"):
    return f"Hello, {name}!"

print(greet())
print(greet("Aditya"))

print("\n------------------")

# 8. Recursive function to find sum of first n natural numbers
def recursive_sum(n):
    if n == 1:
        return 1
    else:
        return n + recursive_sum(n-1)

print("Sum of first 10 natural numbers:", recursive_sum(10))


# -------------------------
# Python Practice - Strings
# -------------------------

# 1. Reverse a string
def reverse_string(s):
    return s[::-1]

print("Reversed:", reverse_string("farmer"))

print("\n------------------")

# 2. Check if string is palindrome
def is_palindrome(s):
    return s == s[::-1]

print("Is 'madam' palindrome?", is_palindrome("madam"))
print("Is 'python' palindrome?", is_palindrome("python"))

print("\n------------------")

# 3. Count vowels in a string
def count_vowels(s):
    vowels = "aeiouAEIOU"
    return sum(1 for char in s if char in vowels)

print("Vowel count in 'Agriculture':", count_vowels("Agriculture"))

print("\n------------------")

# 4. Convert string to uppercase and lowercase
s = "Farmers Are Strong"
print("Upper:", s.upper())
print("Lower:", s.lower())

print("\n------------------")

# 5. Replace word in string
sentence = "Sugarcane is profitable"
print("After replace:", sentence.replace("Sugarcane", "Wheat"))

print("\n------------------")

# 6. Split string into words
text = "Crops need proper fertilizer"
print("Split words:", text.split())

print("\n------------------")

# 7. Check if string contains only digits
print("'12345'.isdigit():", "12345".isdigit())
print("'Farm123'.isdigit():", "Farm123".isdigit())

print("\n------------------")

# 8. Remove spaces from string
def remove_spaces(s):
    return s.replace(" ", "")

print("Without spaces:", remove_spaces("Crop Yield Data"))

print("\n------------------")

# 9. Find frequency of each character
def char_frequency(s):
    freq = {}
    for char in s:
        freq[char] = freq.get(char, 0) + 1
    return freq

print("Char frequency in 'banana':", char_frequency("banana"))

print("\n------------------")

# 10. Longest word in a sentence
def longest_word(sentence):
    words = sentence.split()
    return max(words, key=len)

print("Longest word:", longest_word("Farmers grow sugarcane and rice"))


# -------------------------
# Python Practice - Lists
# -------------------------

# 1. Create a list and print it
fruits = ["Mango", "Banana", "Apple", "Grapes"]
print("Fruits List:", fruits)

print("\n------------------")

# 2. Access elements by index
print("First fruit:", fruits[0])
print("Last fruit:", fruits[-1])

print("\n------------------")

# 3. Append and extend a list
vegetables = ["Potato", "Tomato"]
fruits.append("Orange")
fruits.extend(vegetables)
print("After append & extend:", fruits)

print("\n------------------")

# 4. Insert and remove elements
fruits.insert(2, "Papaya")
fruits.remove("Tomato")
print("After insert & remove:", fruits)

print("\n------------------")

# 5. Sorting and reversing
numbers = [5, 2, 9, 1, 7]
print("Original numbers:", numbers)
numbers.sort()
print("Sorted ascending:", numbers)
numbers.sort(reverse=True)
print("Sorted descending:", numbers)
fruits.reverse()
print("Fruits reversed:", fruits)

print("\n------------------")

# 6. List comprehension
squares = [x**2 for x in range(1, 6)]
print("Squares:", squares)

even_numbers = [x for x in range(1, 11) if x % 2 == 0]
print("Even numbers:", even_numbers)

print("\n------------------")

# 7. Find max, min, sum
data = [10, 20, 30, 40, 50]
print("Max:", max(data))
print("Min:", min(data))
print("Sum:", sum(data))

print("\n------------------")

# 8. Remove duplicates from list
items = [1, 2, 2, 3, 4, 4, 5]
unique_items = list(set(items))
print("Unique items:", unique_items)

print("\n------------------")

# 9. Nested lists
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print("Matrix:", matrix)
print("Element at [1][2]:", matrix[1][2]


# -------------------------
# Python Practice - Tuples
# -------------------------

# 1. Create a tuple and print it
fruits = ("Mango", "Banana", "Apple", "Grapes")
print("Fruits Tuple:", fruits)

print("\n------------------")

# 2. Access elements by index
print("First fruit:", fruits[0])
print("Last fruit:", fruits[-1])

print("\n------------------")

# 3. Tuple with different data types
mixed = (1, "Hello", 3.5, True)
print("Mixed Tuple:", mixed)

print("\n------------------")

# 4. Nested tuple
nested = (1, (2, 3), (4, 5))
print("Nested Tuple:", nested)
print("Element [1][1]:", nested[1][1])

print("\n------------------")

# 5. Tuple unpacking
numbers = (10, 20, 30)
a, b, c = numbers
print("Unpacked values:", a, b, c)

print("\n------------------")

# 6. Count and index
nums = (1, 2, 3, 2, 4, 2)
print("Count of 2:", nums.count(2))
print("Index of 3:", nums.index(3))

print("\n------------------")

# 7. Tuple immutability demo
immutable_example = (1, 2, 3)
print("Original tuple:", immutable_example)
# immutable_example[0] = 100  # ❌ This will give an error (uncomment to test)

print("\n------------------")

# 8. Converting between tuple and list
sample_list = [1, 2, 3, 4]
converted_tuple = tuple(sample_list)
print("List to Tuple:", converted_tuple)

sample_tuple = (5, 6, 7)
converted_list = list(sample_tuple)
converted_list.append(8)
print("Tuple to List:", converted_list)

print("\n------------------")

# 9. Slicing in tuples
letters = ("a", "b", "c", "d", "e")
print("First 3 letters:", letters[:3])
print("Last 2 letters:", letters[-2:])
print("Middle slice:", letters[1:4])

print("\n------------------")

# 10. Tuple with repetition
repeat_tuple = ("Python",) * 3
print("Repeated Tuple:", repeat_tuple)


# -------------------------
# Python Practice - Sets
# -------------------------

# 1. Create a set
fruits = {"Apple", "Banana", "Mango", "Orange"}
print("Fruits Set:", fruits)

print("\n------------------")

# 2. No duplicate elements
duplicates = {"Apple", "Apple", "Mango"}
print("Set with duplicates removed:", duplicates)

print("\n------------------")

# 3. Add elements
fruits.add("Grapes")
print("After adding Grapes:", fruits)

print("\n------------------")

# 4. Update with multiple items
fruits.update(["Pineapple", "Guava"])
print("After updating with multiple fruits:", fruits)

print("\n------------------")

# 5. Remove elements
fruits.remove("Banana")   # ❌ Error if not present
print("After removing Banana:", fruits)

fruits.discard("Papaya")  # ✅ No error if not present
print("After discarding Papaya:", fruits)

print("\n------------------")

# 6. Set operations
A = {1, 2, 3, 4}
B = {3, 4, 5, 6}

print("Set A:", A)
print("Set B:", B)
print("Union:", A | B)
print("Intersection:", A & B)
print("Difference (A - B):", A - B)
print("Symmetric Difference:", A ^ B)

print("\n------------------")

# 7. Membership test
print("Is 3 in A?", 3 in A)
print("Is 10 not in B?", 10 not in B)

print("\n------------------")

# 8. Iterating through set
print("Iterating over fruits set:")
for fruit in fruits:
    print("-", fruit)

print("\n------------------")

# 9. Set length
print("Number of fruits:", len(fruits))

print("\n------------------")

# 10. Frozen set (immutable set)
frozen = frozenset([1, 2, 3, 4])
print("Frozen Set:", frozen)
# frozen.add(5)  # ❌ Error (frozen set cannot be modified)




# -------------------------
# Python Practice - Dictionaries
# -------------------------

# 1. Creating a dictionary
student = {"name": "Aditya", "age": 22, "course": "Data Science"}
print("Student Dictionary:", student)

print("\n------------------")

# 2. Accessing values
print("Name:", student["name"])
print("Age:", student.get("age"))  # safer way

print("\n------------------")

# 3. Adding new key-value pair
student["city"] = "Karad"
print("After adding city:", student)

print("\n------------------")

# 4. Updating values
student["age"] = 23
print("After updating age:", student)

print("\n------------------")

# 5. Removing items
student.pop("course")
print("After popping course:", student)

del student["city"]
print("After deleting city:", student)

print("\n------------------")

# 6. Dictionary methods
student["skills"] = ["Python", "SQL", "Power BI"]
print("Keys:", student.keys())
print("Values:", student.values())
print("Items:", student.items())

print("\n------------------")

# 7. Looping through dictionary
print("Looping through keys and values:")
for key, value in student.items():
    print(f"{key} → {value}")

print("\n------------------")

# 8. Dictionary comprehension
squares = {x: x*x for x in range(1, 6)}
print("Squares Dictionary:", squares)

print("\n------------------")

# 9. Nested dictionary
students = {
    "101": {"name": "Aditya", "age": 22},
    "102": {"name": "Ravi", "age": 23}
}
print("Nested Dictionary:", students)

print("Access nested value:", students["101"]["name"])

print("\n------------------")

# 10. Clearing dictionary
temp = {"a": 1, "b": 2}
temp.clear()
print("After clearing:", temp)


# -------------------------
# Python Practice - Functions
# -------------------------

# 1. Simple function
def greet():
    print("Hello, welcome to Python practice!")

greet()

print("\n------------------")

# 2. Function with parameters
def add(a, b):
    return a + b

print("Sum of 5 and 3:", add(5, 3))

print("\n------------------")

# 3. Function with default argument
def power(base, exp=2):
    return base ** exp

print("Square of 4:", power(4))
print("Cube of 2:", power(2, 3))

print("\n------------------")

# 4. Function with keyword arguments
def student_info(name, age):
    print(f"Name: {name}, Age: {age}")

student_info(age=22, name="Aditya")

print("\n------------------")

# 5. Return multiple values
def calculator(a, b):
    return a+b, a-b, a*b, a/b

add_, sub_, mul_, div_ = calculator(10, 5)
print("Calculator results:", add_, sub_, mul_, div_)

print("\n------------------")

# 6. Variable-length arguments (*args)
def total_sum(*numbers):
    return sum(numbers)

print("Sum of multiple numbers:", total_sum(2, 3, 4, 5))

print("\n------------------")

# 7. Variable-length keyword arguments (**kwargs)
def display_info(**info):
    for key, value in info.items():
        print(f"{key}: {value}")

display_info(name="Aditya", course="Data Science", city="Karad")

print("\n------------------")

# 8. Lambda functions
square = lambda x: x**2
print("Square using lambda:", square(6))

print("\n------------------")

# 9. Function inside function (nested function)
def outer():
    def inner():
        return "Inner function says Hello!"
    return inner()

print(outer())

print("\n------------------")

# 10. Recursive function (factorial)
def factorial(n):
    if n == 0 or n == 1:
        return 1
    return n * factorial(n-1)

print("Factorial of 5:", factorial(5))

# -------------------------
# Python Practice - File Handling
# -------------------------

# 1. Writing to a file
with open("sample.txt", "w") as f:
    f.write("Hello, this is Aditya!\n")
    f.write("Practicing Python file handling.\n")

print("✅ Data written to sample.txt")

print("\n------------------")

# 2. Reading the entire file
with open("sample.txt", "r") as f:
    content = f.read()
print("📖 File Content:\n", content)

print("\n------------------")

# 3. Reading line by line
with open("sample.txt", "r") as f:
    print("📖 Reading line by line:")
    for line in f:
        print(line.strip())

print("\n------------------")

# 4. Appending to a file
with open("sample.txt", "a") as f:
    f.write("This line is appended!\n")

print("✅ Data appended to sample.txt")

print("\n------------------")

# 5. Read after append
with open("sample.txt", "r") as f:
    print("📖 Updated File Content:\n", f.read())

print("\n------------------")

# 6. Writing list of lines
lines = ["Python is powerful.\n", "File handling is important.\n", "Keep practicing!\n"]
with open("sample2.txt", "w") as f:
    f.writelines(lines)

print("✅ Multiple lines written to sample2.txt")

print("\n------------------")

# 7. Reading file into list
with open("sample2.txt", "r") as f:
    lines_read = f.readlines()
print("📖 List of lines from sample2.txt:", lines_read)

print("\n------------------")

# 8. Using 'with' ensures auto-close
def read_file(filename):
    try:
        with open(filename, "r") as f:
            return f.read()
    except FileNotFoundError:
        return "⚠️ File not found!"


# -------------------------
# Python Practice - OOP (Classes & Objects)
# -------------------------

# 1. Basic Class & Object
class Car:
    def __init__(self, brand, model):
        self.brand = brand
        self.model = model

    def display_info(self):
        return f"🚗 Car: {self.brand} {self.model}"

car1 = Car("BMW", "X5")
car2 = Car("Tesla", "Model 3")

print(car1.display_info())
print(car2.display_info())

print("\n------------------")

# 2. Inheritance
class ElectricCar(Car):
    def __init__(self, brand, model, battery_capacity):
        super().__init__(brand, model)
        self.battery_capacity = battery_capacity

    def display_info(self):
        return f"⚡ Electric Car: {self.brand} {self.model}, Battery: {self.battery_capacity} kWh"

e_car = ElectricCar("Tesla", "Model S", 100)
print(e_car.display_info())

print("\n------------------")

# 3. Encapsulation (Private Variable)
class BankAccount:
    def __init__(self, owner, balance):
        self.owner = owner
        self.__balance = balance   # private

    def deposit(self, amount):
        self.__balance += amount
        return f"💰 Deposited {amount}, New Balance: {self.__balance}"

    def withdraw(self, amount):
        if amount <= self.__balance:
            self.__balance -= amount
            return f"💸 Withdrawn {amount}, Remaining Balance: {self.__balance}"
        else:
            return "⚠️ Insufficient Balance!"

    def get_balance(self):
        return self.__balance

account = BankAccount("Aditya", 5000)
print(account.deposit(2000))
print(account.withdraw(1000))
print("Current Balance:", account.get_balance())

print("\n------------------")

# 4. Polymorphism (Method Overriding)
class Animal:
    def sound(self):
        return "Some sound"

class Dog(Animal):
    def sound(self):
        return "🐶 Woof!"

class Cat(Animal):
    def sound(self):
        return "🐱 Meow!"

animals = [Dog(), Cat(), Animal()]
for a in animals:
    print(a.sound())

print("\n------------------")

# 5. Class vs Static Methods
class MathOperations:
    def __init__(self, number):
        self.number = number

    def square(self):
        return self.number ** 2

    @classmethod
    def add(cls, a, b):
        return a + b

    @staticmethod
    def greet():
        return "👋 Welcome to Math Operations"

m = MathOperations(5)
print("Square:", m.square())
print("Addition:", MathOperations.add(10, 20))
print(MathOperations.greet())

print("\n------------------")

# 6. Operator Overloading
class Book:
    def __init__(self, pages):
        self.pages = pages

    def __add__(self, other):
        return self.pages + other.pages

book1 = Book(100)
book2 = Book(200)
print("📚 Total Pages:", book1 + book2)

print("\n------------------")

# 7. Abstract Class
from abc import ABC, abstractmethod

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius * self.radius

circle = Circle(7)
print("⭕ Circle Area:", circle.area())

print("\n------------------")

# 8. Multiple Inheritance
class Father:
    def skills(self):
        return "Driving, Farming"

class Mother:
    def skills(self):
        return "Cooking, Teaching"

class Child(Father, Mother):
    def skills(self):
        return f"Child skills: {Father.skills(self)} + {Mother.skills(self)} + Coding"

c = Child()
print(c.skills())


print(read_file("sample.txt"))
print(read_file("not_exist.txt"))

print("\n------------------


# -------------------------
# Python Practice - Exception Handling & Modules
# -------------------------

# 1. Basic Exception Handling
try:
    num = int(input("Enter a number: "))
    print("✅ Square:", num ** 2)
except ValueError:
    print("⚠️ Please enter a valid number.")

print("\n------------------")

# 2. Multiple Exceptions
try:
    a = int(input("Enter numerator: "))
    b = int(input("Enter denominator: "))
    result = a / b
    print("✅ Result:", result)
except ZeroDivisionError:
    print("⚠️ Denominator cannot be zero!")
except ValueError:
    print("⚠️ Please enter only numbers.")

print("\n------------------")

# 3. Finally Block
try:
    file = open("example.txt", "w")
    file.write("Hello, Python!")
except Exception as e:
    print("⚠️ Error:", e)
finally:
    file.close()
    print("📂 File closed successfully.")

print("\n------------------")

# 4. Raise Custom Exception
def withdraw(balance, amount):
    if amount > balance:
        raise ValueError("⚠️ Insufficient Balance!")
    return balance - amount

try:
    print("Remaining Balance:", withdraw(1000, 1500))
except ValueError as e:
    print("❌ Error:", e)

print("\n------------------")

# 5. User-Defined Exception
class TooYoungException(Exception):
    pass

class TooOldException(Exception):
    pass

def check_age(age):
    if age < 18:
        raise TooYoungException("⚠️ You are too young to vote.")
    elif age > 100:
        raise TooOldException("⚠️ Age not valid for voting.")
    else:
        return "✅ You are eligible to vote."

try:
    print(check_age(15))
except (TooYoungException, TooOldException) as e:
    print("❌ Error:", e)

print("\n------------------")

# -------------------------
# Python Modules
# -------------------------

# 6. Import Built-in Modules
import math, random, datetime

print("🧮 Square root of 16:", math.sqrt(16))
print("🎲 Random number (1-100):", random.randint(1, 100))
print("📅 Current Date & Time:", datetime.datetime.now())

print("\n------------------")

# 7. Using Aliases
import numpy as np

arr = np.array([1, 2, 3, 4, 5])
print("🔢 Numpy Array:", arr)

print("\n------------------")

# 8. Creating & Importing Custom Module
# Save below code in a file named `mymodule.py` in same folder
# def greet(name):
#     return f"👋 Hello, {name}! Welcome to Python Modules."

import mymodule
print(mymodule.greet("Aditya"))

print("\n------------------")

# 9. Using 'from' import
from math import factorial
print("💡 Factorial of 5:", factorial(5))

print("\n------------------")

# 10. Package Example (folder with __init__.py)
# project/
#   ├── mypackage/
#   │      ├── __init__.py
#   │      ├── add.py
#   │      └── subtract.py
#   └── main.py
#
# add.py → def add(a, b): return a + b
# subtract.py → def subtract(a, b): return a - b
#
# main.py example:
# from mypackage import add, subtract
# print(add.add(5, 3))
# print(subtract.subtract(10, 4))


# -------------------------
# Python Practice - File Handling & Data Structures
# -------------------------

# 1. Writing to a File
with open("sample.txt", "w") as f:
    f.write("Hello Farmers 🌱\n")
    f.write("This is a Python file handling practice.\n")
print("✅ File 'sample.txt' created and written.")

print("\n------------------")

# 2. Reading from a File
with open("sample.txt", "r") as f:
    content = f.read()
print("📂 File Content:\n", content)

print("\n------------------")

# 3. Reading Line by Line
with open("sample.txt", "r") as f:
    for line in f:
        print("➡️", line.strip())

print("\n------------------")

# 4. Appending to a File
with open("sample.txt", "a") as f:
    f.write("Adding more data...\n")
print("✍️ Data appended successfully.")

print("\n------------------")

# 5. File Exception Handling
try:
    with open("nofile.txt", "r") as f:
        print(f.read())
except FileNotFoundError:
    print("⚠️ File not found!")

print("\n==================")
# 📘 DATA STRUCTURES
print("📘 PRACTICING DATA STRUCTURES")
print("==================\n")

# 6. Lists
fruits = ["Mango", "Banana", "Apple"]
fruits.append("Orange")
print("🍎 Fruits List:", fruits)

print("\n------------------")

# 7. Tuples (Immutable)
colors = ("Red", "Green", "Blue")
print("🎨 Colors Tuple:", colors)
print("First Color:", colors[0])

print("\n------------------")

# 8. Sets (Unique Values)
numbers = {1, 2, 2, 3, 4, 5}
print("🔢 Numbers Set:", numbers)

print("\n------------------")

# 9. Dictionary
farmer = {"name": "Aditya", "crop": "Sugarcane", "soil": "Black"}
print("👨‍🌾 Farmer Dictionary:", farmer)
print("Crop:", farmer["crop"])

print("\n------------------")

# 10. Nested Data Structures
farm_data = {
    "farmer": "Aditya",
    "fields": [
        {"crop": "Wheat", "area": "2 acres"},
        {"crop": "Rice", "area": "1.5 acres"}
    ]
}
print("🌾 Farm Data:", farm_data)

print("\n------------------")

# 11. Dictionary Methods
print("All Keys:", farmer.keys())
print("All Values:", farmer.values())

print("\n------------------")

# 12. List Comprehension
squares = [x**2 for x in range(1, 6)]
print("📐 Squares:", squares)

print("\n------------------")

# 13. Set Operations
set_a = {1, 2, 3}
set_b = {3, 4, 5}
print("Union:", set_a | set_b)
print("Intersection:", set_a & set_b)

print("\n------------------")

# 14. Dictionary Comprehension
crops = ["Wheat", "Rice", "Sugarcane"]
prices = [2000, 3000, 3500]
crop_price = {c: p for c, p in zip(crops, prices)}
print("💰 Crop Price Dictionary:", crop_price)

print("\n------------------")

# 15. Deleting Files
import os
if os.path.exists("sample.txt"):
    os.remove("sample.txt")
    print("🗑️ 'sample.txt' deleted.")
else:
    print("⚠️ File does not exist.")


# -------------------------
# Python Practice - Functions & OOP
# -------------------------

# 1. Simple Function
def greet(name):
    return f"Hello {name}, welcome to Python Practice! 🌱"

print(greet("Aditya"))

print("\n------------------")

# 2. Function with Default Argument
def area_circle(radius, pi=3.14):
    return pi * radius * radius

print("🔵 Area of Circle:", area_circle(5))
print("🔵 Area with custom pi:", area_circle(5, 3.14159))

print("\n------------------")

# 3. Function with Multiple Arguments
def farmer_info(name, crop, acres):
    return f"👨‍🌾 Farmer {name} grows {crop} on {acres} acres."

print(farmer_info("Aditya", "Sugarcane", 2.5))

print("\n------------------")

# 4. Function with *args
def add_numbers(*args):
    return sum(args)

print("➕ Sum:", add_numbers(10, 20, 30, 40))

print("\n------------------")

# 5. Function with **kwargs
def farm_details(**kwargs):
    for key, value in kwargs.items():
        print(f"{key}: {value}")

farm_details(name="Aditya", crop="Rice", soil="Black Soil")

print("\n==================")
# 📘 OOPS PRACTICE
print("📘 PRACTICING OBJECT ORIENTED PROGRAMMING")
print("==================\n")

# 6. Simple Class
class Farmer:
    def __init__(self, name, crop):
        self.name = name
        self.crop = crop
    
    def show_details(self):
        return f"👨‍🌾 {self.name} grows {self.crop}"

farmer1 = Farmer("Aditya", "Sugarcane")
print(farmer1.show_details())

print("\n------------------")

# 7. Class with Methods
class BankAccount:
    def __init__(self, owner, balance=0):
        self.owner = owner
        self.balance = balance
    
    def deposit(self, amount):
        self.balance += amount
        return f"💰 {amount} deposited. New Balance = {self.balance}"
    
    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
            return f"💸 {amount} withdrawn. Remaining Balance = {self.balance}"
        else:
            return "⚠️ Insufficient balance!"

account = BankAccount("Aditya", 1000)
print(account.deposit(500))
print(account.withdraw(300))
print(account.withdraw(2000))

print("\n------------------")

# 8. Inheritance
class Animal:
    def sound(self):
        return "Some sound"

class Cow(Animal):
    def sound(self):
        return "🐄 Moo Moo"

class Dog(Animal):
    def sound(self):
        return "🐶 Woof Woof"

cow = Cow()
dog = Dog()
print("Cow Sound:", cow.sound())
print("Dog Sound:", dog.sound())

print("\n------------------")

# 9. Polymorphism
for animal in [Cow(), Dog()]:
    print(animal.sound())

print("\n------------------")

# 10. Encapsulation
class Crop:
    def __init__(self, name):
        self.__name = name  # private variable
    
    def get_crop(self):
        return f"🌾 Crop: {self.__name}"

crop1 = Crop("Wheat")
print(crop1.get_crop())

print("\n------------------")

# 11. Static Method
class MathUtils:
    @staticmethod
    def square(x):
        return x * x

print("📐 Square of 6:", MathUtils.square(6))

print("\n------------------")

# 12. Class Variables
class Farm:
    total_farms = 0
    
    def __init__(self, name):
        self.name = name
        Farm.total_farms += 1

farm1 = Farm("GreenLand")
farm2 = Farm("AgroFarm")
print("🏡 Total Farms:", Farm.total_farms)

print("\n------------------")

# 13. Operator Overloading
class Box:
    def __init__(self, value):
        self.value = value
    
    def __add__(self, other):
        return Box(self.value + other.value)
    
    def __str__(self):
        return f"📦 Box Value: {self.value}"

b1 = Box(10)
b2 = Box(20)
b3 = b1 + b2
print(b3)

print("\n------------------")

# 14. Abstract Class
from abc import ABC, abstractmethod

class Vehicle(ABC):
    @abstractmethod
    def move(self):
        pass

class Tractor(Vehicle):
    def move(self):
        return "🚜 Tractor is moving"

tractor = Tractor()
print(tractor.move())

print("\n------------------")

# 15. Multiple Inheritance
class A:
    def featureA(self):
        return "Feature A"

class B:
    def featureB(self):
        return "Feature B"

class C(A, B):
    def featureC(self):
        return "Feature C"

obj = C()
print(obj.featureA(), obj.featureB(), obj.featureC())



# -------------------------
# Python Practice - Modules, Libraries & Exception Handling
# -------------------------

import math
import random
import datetime

print("📘 MODULES, LIBRARIES & EXCEPTION HANDLING PRACTICE")
print("====================================================\n")

# 1. Using math module
print("🔢 Math Module Examples:")
print("Square root of 16:", math.sqrt(16))
print("Factorial of 5:", math.factorial(5))
print("Power 2^3:", math.pow(2, 3))
print("Pi value:", math.pi)

print("\n------------------")

# 2. Using random module
print("🎲 Random Module Examples:")
print("Random integer (1-10):", random.randint(1, 10))
print("Random float (0-1):", random.random())
print("Random choice:", random.choice(['Wheat', 'Rice', 'Sugarcane']))

print("\n------------------")

# 3. Using datetime module
today = datetime.date.today()
now = datetime.datetime.now()
print("📅 Today's Date:", today)
print("⏰ Current Time:", now.strftime("%H:%M:%S"))

print("\n------------------")

# 4. Importing specific functions
from math import ceil, floor
print("Ceil of 7.4:", ceil(7.4))
print("Floor of 7.4:", floor(7.4))

print("\n==================")
# 📘 EXCEPTION HANDLING
print("📘 PRACTICING EXCEPTION HANDLING")
print("==================\n")

# 5. Basic try-except
try:
    x = int("Hello")
except ValueError:
    print("⚠️ ValueError: Cannot convert string to int")

print("\n------------------")

# 6. Handling multiple exceptions
try:
    num = 10 / 0
except ZeroDivisionError:
    print("⚠️ Cannot divide by zero")
except Exception as e:
    print("⚠️ Error:", e)

print("\n------------------")

# 7. Try-Except-Finally
try:
    f = open("sample.txt", "r")
    print(f.read())
except FileNotFoundError:
    print("⚠️ File not found")
finally:
    print("✅ File handling completed")

print("\n------------------")

# 8. Custom Exception
class LowBalanceError(Exception):
    pass

def withdraw(balance, amount):
    if amount > balance:
        raise LowBalanceError("⚠️ Not enough balance!")
    return balance - amount

try:
    print("Remaining balance:", withdraw(1000, 1500))
except LowBalanceError as e:
    print(e)

print("\n------------------")

# 9. Else block in exception
try:
    result = 20 / 5
except ZeroDivisionError:
    print("⚠️ Division by zero")
else:
    print("✅ Division successful:", result)

print("\n------------------")

# 10. Using assert
def check_age(age):
    assert age >= 18, "⚠️ Age must be 18 or older"
    return "✅ You are eligible"

try:
    print(check_age(16))
except AssertionError as e:
    print(e)

print("\n------------------")

# 11. Using pass in exception
try:
    num = int("Python")
except ValueError:
    pass  # ignore error
print("Program continues smoothly ✅")

print("\n------------------")

# 12. Exception inside loop
numbers = [10, 0, 5]
for n in numbers:
    try:
        print("100 /", n, "=", 100/n)
    except ZeroDivisionError:
        print("⚠️ Skipped division by zero")


# -------------------------
# Python Practice - File Handling
# -------------------------

print("📘 FILE HANDLING PRACTICE")
print("==========================\n")

# 1. Writing to a file
with open("sample.txt", "w") as f:
    f.write("Hello Farmers!\n")
    f.write("This is a fertilizer recommendation practice file.\n")
print("✅ File 'sample.txt' created and written.")

print("\n------------------")

# 2. Reading from a file
with open("sample.txt", "r") as f:
    content = f.read()
print("📖 File Content:\n", content)

print("\n------------------")

# 3. Reading line by line
with open("sample.txt", "r") as f:
    print("📖 Reading line by line:")
    for line in f:
        print(line.strip())

print("\n------------------")

# 4. Appending to a file
with open("sample.txt", "a") as f:
    f.write("Adding more fertilizer data...\n")
print("✅ Data appended to 'sample.txt'")

print("\n------------------")

# 5. Read after append
with open("sample.txt", "r") as f:
    print("📖 Updated File Content:\n", f.read())

print("\n------------------")

# 6. Writing multiple lines
lines = ["Nitrogen improves leaf growth\n", "Phosphorus supports roots\n", "Potassium improves fruit quality\n"]
with open("nutrients.txt", "w") as f:
    f.writelines(lines)
print("✅ Multiple lines written to 'nutrients.txt'")

print("\n------------------")

# 7. Reading multiple lines
with open("nutrients.txt", "r") as f:
    print("📖 Nutrients File Content:")
    for line in f.readlines():
        print(line.strip())

print("\n------------------")

# 8. File pointer usage (tell & seek)
with open("sample.txt", "r") as f:
    print("🔎 File pointer position:", f.tell())
    print("First 5 characters:", f.read(5))
    print("🔎 File pointer after read:", f.tell())
    f.seek(0)
    print("📖 After reset with seek():", f.read(10))

print("\n------------------")

# 9. Handling file not found error
try:
    with open("missing.txt", "r") as f:
        print(f.read())
except FileNotFoundError:
    print("⚠️ File 'missing.txt' not found")

print("\n------------------")

# 10. Using with block for auto close
with open("auto.txt", "w") as f:
    f.write("This file will auto close.")
print("✅ 'auto.txt' created using with block")

print("\n------------------")

# 11. Copy content from one file to another
with open("sample.txt", "r") as f1, open("copy_sample.txt", "w") as f2:
    for line in f1:
        f2.write(line)
print("✅ File copied to 'copy_sample.txt'")

print("\n------------------")

# 12. Delete a file
import os
if os.path.exists("auto.txt"):
    os.remove("auto.txt")
    print("🗑️ 'auto.txt' deleted")
else:
    print("⚠️ File not found for deletion")



# -------------------------
# Python Practice - OOP (Object Oriented Programming)
# -------------------------

print("🎓 OOP PRACTICE")
print("==========================\n")

# 1. Simple Class & Object
class Farmer:
    def __init__(self, name, crop):
        self.name = name
        self.crop = crop

    def details(self):
        return f"👨‍🌾 Farmer {self.name} grows {self.crop}."

farmer1 = Farmer("Aditya", "Sugarcane")
print(farmer1.details())

print("\n------------------")

# 2. Class Variables vs Instance Variables
class Farm:
    location = "Maharashtra"  # class variable

    def __init__(self, owner, size):
        self.owner = owner
        self.size = size  # instance variable

farm1 = Farm("Aditya", "10 acres")
farm2 = Farm("Ramesh", "5 acres")
print(f"{farm1.owner} → {farm1.size}, Location: {farm1.location}")
print(f"{farm2.owner} → {farm2.size}, Location: {farm2.location}")

print("\n------------------")

# 3. Inheritance
class Crop:
    def grow(self):
        return "🌱 Crop is growing."

class Wheat(Crop):
    def grow(self):
        return "🌾 Wheat is growing fast."

c = Wheat()
print(c.grow())

print("\n------------------")

# 4. Multiple Inheritance
class Soil:
    def soil_info(self):
        return "🪨 Soil contains nutrients."

class Weather:
    def weather_info(self):
        return "☀️ Weather is sunny."

class FarmSystem(Soil, Weather):
    pass

fs = FarmSystem()
print(fs.soil_info())
print(fs.weather_info())

print("\n------------------")

# 5. Polymorphism
class Cow:
    def sound(self):
        return "🐄 Moo"

class Dog:
    def sound(self):
        return "🐕 Bark"

for animal in (Cow(), Dog()):
    print(animal.sound())

print("\n------------------")

# 6. Encapsulation
class Account:
    def __init__(self, balance):
        self.__balance = balance  # private variable

    def deposit(self, amount):
        self.__balance += amount

    def get_balance(self):
        return self.__balance

acc = Account(1000)
acc.deposit(500)
print(f"💰 Account Balance: {acc.get_balance()}")

print("\n------------------")

# 7. Abstraction using Abstract Class
from abc import ABC, abstractmethod

class Machine(ABC):
    @abstractmethod
    def operate(self):
        pass

class Tractor(Machine):
    def operate(self):
        return "🚜 Tractor is plowing the field."

tractor = Tractor()
print(tractor.operate())

print("\n------------------")

# 8. Method Overloading (Python way using default args)
class Calculator:
    def add(self, a, b=0, c=0):
        return a + b + c

calc = Calculator()
print("Add 2 numbers:", calc.add(5, 10))
print("Add 3 numbers:", calc.add(5, 10, 15))

print("\n------------------")

# 9. Method Overriding
class Fertilizer:
    def info(self):
        return "🌿 General fertilizer info"

class OrganicFertilizer(Fertilizer):
    def info(self):
        return "🍀 Organic fertilizer improves soil health"

f = OrganicFertilizer()
print(f.info())

print("\n------------------")

# 10. Static Method
class Helper:
    @staticmethod
    def greet():
        return "🙏 Welcome to Farmer's Portal"

print(Helper.greet())



# -------------------------
# Python Practice - Exception Handling
# -------------------------

print("⚡ EXCEPTION HANDLING PRACTICE")
print("==============================\n")

# 1. Basic try-except
try:
    x = int("abc")  # invalid conversion
except ValueError:
    print("❌ Error: Cannot convert string to integer")

print("\n------------------")

# 2. Multiple except blocks
try:
    a, b = 10, 0
    result = a / b
except ZeroDivisionError:
    print("❌ Division by zero is not allowed")
except TypeError:
    print("❌ Type mismatch error")

print("\n------------------")

# 3. Try-Except-Else
try:
    num = 25 / 5
except ZeroDivisionError:
    print("❌ Cannot divide by zero")
else:
    print("✅ Division successful, Result:", num)

print("\n------------------")

# 4. Try-Except-Finally
try:
    file = open("sample.txt", "w")
    file.write("Hello Farmers")
except IOError:
    print("❌ File operation failed")
finally:
    file.close()
    print("📂 File closed safely")

print("\n------------------")

# 5. Raising an Exception
def check_nitrogen(n):
    if n < 0:
        raise ValueError("❌ Nitrogen value cannot be negative")
    else:
        return f"✅ Nitrogen value is {n}"

try:
    print(check_nitrogen(-10))
except ValueError as e:
    print(e)

print("\n------------------")

# 6. Custom Exception
class LowPhosphorusError(Exception):
    pass

def check_phosphorus(p):
    if p < 20:
        raise LowPhosphorusError("⚠️ Phosphorus level too low for crops")
    return "✅ Phosphorus level is good"

try:
    print(check_phosphorus(10))
except LowPhosphorusError as e:
    print(e)

print("\n------------------")

# 7. Handling Multiple Errors Together
try:
    data = [1, 2, 3]
    print(data[5])  # IndexError
    print(10 / 0)   # ZeroDivisionError
except (IndexError, ZeroDivisionError) as e:
    print("❌ Error occurred:", e)

print("\n------------------")

# 8. Using assert for validation
try:
    crop = "Wheat"
    assert crop == "Rice", "❌ Only Rice crop is allowed"
except AssertionError as e:
    print(e)

print("\n------------------")

# 9. Nested try-except
try:
    try:
        val = int("abc")
    except ValueError:
        print("❌ Inner block: invalid conversion")
    finally:
        print("🔒 Inner finally always runs")
except Exception:
    print("❌ Outer block caught an error")

print("\n------------------")

# 10. Exception handling in loops
numbers = [10, 0, 5, "x"]
for n in numbers:
    try:
        print("Result:", 100 / int(n))
    except Exception as e:
        print("❌ Error:", e)



# Program 17: Find Factorial of a Number using Recursion

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n-1)

# Input from user
num = int(input("Enter a number: "))

if num < 0:
    print("Factorial does not exist for negative numbers.")
else:
    print(f"Factorial of {num} is {factorial(num)}")


# Program 18: Fibonacci Series using Recursion

def fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        seq = fibonacci(n - 1)
        seq.append(seq[-1] + seq[-2])
        return seq

# Input from user
terms = int(input("Enter number of terms: "))

if terms <= 0:
    print("Please enter a positive integer.")
else:
    print(f"Fibonacci sequence of {terms} terms: {fibonacci(terms)}")


# Program 19: Sum of Digits using Recursion

def sum_of_digits(n):
    if n == 0:
        return 0
    else:
        return (n % 10) + sum_of_digits(n // 10)

# Input from user
num = int(input("Enter a number: "))

print(f"Sum of digits of {num} = {sum_of_digits(num)}")




# Program 20: Factorial using Recursion

def factorial(n):
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)

# Input from user
num = int(input("Enter a number: "))

print(f"Factorial of {num} = {factorial(num)}")




# Program 21: Fibonacci Series using Recursion

def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

# Input from user
num = int(input("Enter number of terms: "))

print("Fibonacci Series:")
for i in range(num):
    print(fibonacci(i), end=" ")



